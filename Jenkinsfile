pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'iris-train'
        CONTAINER_NAME = 'iris-container'
        DOCKER_IMAGE_TAG = "${DOCKER_IMAGE}:${BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üì¶ Cloning repository...'
                checkout scm
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'üî® Building Docker image...'
                script {
                    // V√©rifier si Docker est install√©
                    sh 'docker --version'
                    
                    // Construire l'image Docker
                    sh """
                        docker build -t ${DOCKER_IMAGE_TAG} .
                        echo "Image built: ${DOCKER_IMAGE_TAG}"
                    """
                }
            }
        }
        
        stage('Run Training') {
            steps {
                echo 'ü§ñ Starting ML training...'
                script {
                    // Cr√©er le dossier artifacts sur l'h√¥te
                    sh 'mkdir -p artifacts'
                    
                    // Ex√©cuter le container avec volume mount
                    sh """
                        docker run --name ${CONTAINER_NAME}-${BUILD_NUMBER} \
                        --rm \
                        -v "${WORKSPACE}/artifacts:/app/artifacts" \
                        ${DOCKER_IMAGE_TAG}
                    """
                }
            }
        }
        
        stage('Verify Artifacts') {
            steps {
                echo 'üîç Verifying generated artifacts...'
                script {
                    sh '''
                        echo "Contents of artifacts directory:"
                        ls -la artifacts/
                        
                        if [ -f "artifacts/iris_model.pkl" ]; then
                            echo "‚úÖ Model file found!"
                            file artifacts/iris_model.pkl
                        else
                            echo "‚ùå Model file not found!"
                            exit 1
                        fi
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Cleaning up Docker resources...'
            script {
                // Nettoyage s√©curis√© - ignorer les erreurs si les ressources n'existent pas
                sh """
                    # Supprimer l'image construite
                    docker rmi ${DOCKER_IMAGE_TAG} || echo "Image already removed"
                    
                    # Nettoyer les containers arr√™t√©s
                    docker container prune -f || echo "No containers to clean"
                    
                    # Nettoyer les images non utilis√©es
                    docker image prune -f || echo "No images to clean"
                """
            }
        }
        
        success {
            echo '‚úÖ Pipeline completed successfully!'
            
            // Archiver les artifacts
            archiveArtifacts artifacts: 'artifacts/**/*', allowEmptyArchive: false
            
            // Afficher un r√©sum√©
            script {
                sh '''
                    echo "=== BUILD SUMMARY ==="
                    echo "‚úÖ Model trained successfully"
                    echo "‚úÖ Artifacts generated:"
                    ls -la artifacts/
                    echo "====================="
                '''
            }
        }
        
        failure {
            echo '‚ùå Pipeline failed!'
            
            // Debug info en cas d'√©chec
            script {
                sh '''
                    echo "=== DEBUG INFORMATION ==="
                    echo "Docker version:"
                    docker --version || echo "Docker not available"
                    
                    echo "Workspace contents:"
                    ls -la
                    
                    echo "Artifacts directory:"
                    ls -la artifacts/ || echo "Artifacts directory not found"
                    
                    echo "Docker images:"
                    docker images | grep iris-train || echo "No iris-train images found"
                    
                    echo "========================="
                '''
            }
        }
    }
}