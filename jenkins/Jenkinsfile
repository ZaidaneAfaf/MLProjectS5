pipeline {
    agent any
    
    environment {
        PYTHON_VERSION = '3.13.5'
        DOCKER_COMPOSE_VERSION = 'v2.33.1'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Cloning repository...'
                checkout scm
            }
        }
        
        stage('Verify Environment') {
            steps {
                echo 'Checking environment...'
                bat '''
                    echo Current directory: %CD%
                    dir
                    echo.
                    echo Python version:
                    python --version || echo Python not found in PATH
                    echo.
                    echo Docker version:
                    docker --version
                    echo.
                    echo Docker Compose version:
                    docker-compose --version || docker compose version
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'Installing Python dependencies...'
                bat '''
                    echo Installing core ML packages...
                    pip install scikit-learn pandas numpy joblib psutil
                    
                    echo Installing TensorBoard and visualization...
                    pip install torch torchvision torchaudio tensorboard matplotlib --index-url https://download.pytorch.org/whl/cpu
                    
                    echo Installing API and web framework...
                    pip install fastapi uvicorn streamlit requests pydantic
                '''
            }
        }
        
        stage('Local Python Training') {
            steps {
                echo 'Training model with local Python...'
                bat '''
                    echo Creating artifacts directories...
                    if not exist "artifacts" mkdir artifacts
                    if not exist "artifacts\\tensorboard" mkdir artifacts\\tensorboard
                    if not exist "serveur\\models" mkdir serveur\\models
                    
                    echo Running training script...
                    cd jenkins
                    set PYTHONIOENCODING=utf-8
                    python train.py
                    
                    echo Moving trained models to artifacts and serveur...
                    if exist "*.pkl" (
                        copy *.pkl "..\\artifacts\\"
                        copy *.pkl "..\\serveur\\models\\"
                        echo Models copied successfully
                    )
                    
                    cd ..
                    echo Checking artifacts directory...
                    dir artifacts
                    
                    echo Checking TensorBoard logs...
                    if exist "artifacts\\tensorboard" (
                        dir artifacts\\tensorboard
                        echo TensorBoard logs available
                    ) else (
                        echo No TensorBoard logs found
                    )
                    
                    if exist "serveur\\models\\*.pkl" (
                        echo SUCCESS: Models available for deployment
                    ) else (
                        echo ERROR: No models available for deployment
                        exit /b 1
                    )
                '''
            }
        }
        
        stage('Fix Dockerfile Extension') {
            steps {
                echo 'Fixing Dockerfile.tensorboard extension...'
                bat '''
                    echo Renaming Dockerfile.tensorboard.txt to Dockerfile.tensorboard...
                    if exist "Dockerfile.tensorboard.txt" (
                        ren Dockerfile.tensorboard.txt Dockerfile.tensorboard
                        echo File renamed successfully
                    ) else (
                        echo Creating Dockerfile.tensorboard...
                        echo FROM tensorflow/tensorflow:2.13.0 > Dockerfile.tensorboard
                        echo RUN pip install psutil matplotlib >> Dockerfile.tensorboard
                        echo WORKDIR /app >> Dockerfile.tensorboard
                        echo EXPOSE 6006 >> Dockerfile.tensorboard
                        echo CMD ["tensorboard", "--logdir=/tensorboard_logs", "--host=0.0.0.0", "--port=6006", "--reload_interval=5"] >> Dockerfile.tensorboard
                        echo Dockerfile.tensorboard created
                    )
                    dir Dockerfile.tensorboard*
                '''
            }
        }
        
        stage('Build TensorBoard Image') {
            steps {
                echo 'Building custom TensorBoard image...'
                bat '''
                    echo Building TensorBoard Docker image...
                    docker build -t iris-tensorboard:latest -f Dockerfile.tensorboard .
                    echo TensorBoard image built successfully
                    docker images | findstr iris-tensorboard
                '''
            }
        }
        
        stage('Stop Previous Services') {
            steps {
                echo 'Stopping previous services...'
                bat '''
                    echo Killing Python processes...
                    taskkill /F /IM python.exe 2>nul || echo No Python processes to kill
                    taskkill /F /IM uvicorn.exe 2>nul || echo No uvicorn processes to kill  
                    taskkill /F /IM streamlit.exe 2>nul || echo No streamlit processes to kill
                    taskkill /F /IM tensorboard.exe 2>nul || echo No tensorboard processes to kill
                    
                    echo Stopping Docker containers...
                    docker-compose down --remove-orphans 2>nul || echo No containers to stop
                    docker stop iris-serveur iris-client iris-tensorboard 2>nul || echo No manual containers to stop
                    docker rm iris-serveur iris-client iris-tensorboard 2>nul || echo No manual containers to remove
                    
                    echo Cleaning up old images...
                    docker image prune -f 2>nul || echo No images to prune
                    
                    echo Waiting for ports to be freed...
                    timeout /t 5 /nobreak 1>nul 2>&1
                    exit /b 0
                '''
            }
        }
        
        stage('Deploy Application') {
            steps {
                echo 'Deploying application with TensorBoard...'
                bat '''
                    echo Starting Docker Compose with TensorBoard...
                    docker-compose up -d --build
                    
                    echo Waiting for services to start...
                    timeout /t 90 /nobreak 1>nul 2>&1
                    
                    echo Checking container status...
                    docker-compose ps
                    
                    echo Deployment completed - services are starting up
                '''
            }
        }
        
        stage('Verify Deployment') {
            steps {
                echo 'Verifying deployment with retries...'
                script {
                    def maxRetries = 15
                    def retryDelay = 10
                    
                    // Check API
                    echo 'Checking FastAPI service...'
                    def apiOk = false
                    for (int i = 0; i < maxRetries; i++) {
                        def apiStatus = bat(
                            script: "curl -f http://localhost:8000 --connect-timeout 5 --max-time 10",
                            returnStatus: true
                        )
                        if (apiStatus == 0) {
                            echo "API is responding"
                            apiOk = true
                            break
                        }
                        echo "Waiting for API... retry ${i+1}/${maxRetries}"
                        bat "timeout /t ${retryDelay} /nobreak 1>nul 2>&1"
                    }
                    
                    // Check Streamlit
                    echo 'Checking Streamlit service...'
                    def streamlitOk = false
                    for (int i = 0; i < maxRetries; i++) {
                        def streamlitStatus = bat(
                            script: "curl -f http://localhost:8501 --connect-timeout 5 --max-time 10",
                            returnStatus: true
                        )
                        if (streamlitStatus == 0) {
                            echo "Streamlit is responding"
                            streamlitOk = true
                            break
                        }
                        echo "Waiting for Streamlit... retry ${i+1}/${maxRetries}"
                        bat "timeout /t ${retryDelay} /nobreak 1>nul 2>&1"
                    }
                    
                    // Check TensorBoard
                    echo 'Checking TensorBoard service...'
                    def tensorboardOk = false
                    for (int i = 0; i < maxRetries; i++) {
                        def tensorboardStatus = bat(
                            script: "curl -f http://localhost:6006 --connect-timeout 5 --max-time 10",
                            returnStatus: true
                        )
                        if (tensorboardStatus == 0) {
                            echo "TensorBoard is responding"
                            tensorboardOk = true
                            break
                        }
                        echo "Waiting for TensorBoard... retry ${i+1}/${maxRetries}"
                        bat "timeout /t ${retryDelay} /nobreak 1>nul 2>&1"
                    }
                    
                    // Build status report
                    def servicesStatus = []
                    if (apiOk) servicesStatus.add("API")
                    if (streamlitOk) servicesStatus.add("Streamlit")
                    if (tensorboardOk) servicesStatus.add("TensorBoard")
                    
                    echo "Services status: ${servicesStatus.join(', ')}"
                    
                    // Determine build result
                    if (apiOk && streamlitOk && tensorboardOk) {
                        echo "All services are responding correctly"
                        currentBuild.result = 'SUCCESS'
                    } else if (streamlitOk || apiOk) {
                        echo "Partial deployment - some services running"
                        currentBuild.result = 'UNSTABLE'
                    } else {
                        echo "Deployment failed - no services responding"
                        error("Deployment verification failed")
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Archiving artifacts and logs...'
            archiveArtifacts artifacts: 'models/**/*.pkl', allowEmptyArchive: true
            archiveArtifacts artifacts: 'artifacts/**/*', allowEmptyArchive: true
            
            bat '''
                echo.
                echo ===== DEPLOYMENT COMPLETE =====
                echo.
                echo Docker containers status:
                docker-compose ps || echo Docker compose not available
                echo.
                echo Port usage:
                netstat -an | findstr ":8000" 1>nul && echo Port 8000 (API): IN USE || echo Port 8000 (API): FREE
                netstat -an | findstr ":8501" 1>nul && echo Port 8501 (Streamlit): IN USE || echo Port 8501 (Streamlit): FREE
                netstat -an | findstr ":6006" 1>nul && echo Port 6006 (TensorBoard): IN USE || echo Port 6006 (TensorBoard): FREE
                echo.
                echo Application URLs:
                echo Streamlit UI: http://localhost:8501
                echo FastAPI: http://localhost:8000
                echo API Docs: http://localhost:8000/docs
                echo TensorBoard: http://localhost:6006
                exit /b 0
            '''
        }
        
        success {
            echo 'Pipeline completed successfully!'
            bat '''
                echo.
                echo =========================================
                echo    DEPLOYMENT SUCCESSFUL
                echo =========================================
                echo.
                echo All services are running:
                echo  - Streamlit UI: http://localhost:8501
                echo  - FastAPI: http://localhost:8000
                echo  - API Docs: http://localhost:8000/docs
                echo  - TensorBoard: http://localhost:6006
                echo.
                echo =========================================
            '''
        }
        
        unstable {
            echo 'Pipeline completed with warnings'
            bat '''
                echo.
                echo =========================================
                echo    DEPLOYMENT COMPLETED WITH WARNINGS
                echo =========================================
                echo.
                echo Some services may need additional time to initialize.
                echo.
                echo Please check manually:
                echo  - http://localhost:8501
                echo  - http://localhost:8000  
                echo  - http://localhost:6006
                echo.
                echo Check Docker containers:
                echo docker-compose ps
                echo =========================================
            '''
        }
        
        failure {
            echo 'Pipeline failed'
            bat '''
                echo.
                echo =========================================
                echo    DEPLOYMENT FAILED
                echo =========================================
                echo.
                echo Check Docker logs:
                docker-compose logs --tail=50
                echo.
                echo Check container status:
                docker-compose ps
                echo =========================================
                exit /b 0
            '''
        }
    }
}