pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'iris-train'
        CONTAINER_NAME = 'iris-container'
        DOCKER_IMAGE_TAG = "${DOCKER_IMAGE}:${BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Cloning repository...'
                checkout scm
            }
        }
        
        stage('Verify Environment') {
            steps {
                echo 'Checking environment...'
                bat '''
                    echo Current directory: %CD%
                    dir
                    echo.
                    echo Python version:
                    python --version || echo Python not found in PATH
                    echo.
                    echo Docker version:
                    docker --version
                '''
            }
        }
        
        stage('Local Python Training') {
            steps {
                echo 'Training model with local Python (no Docker)...'
                bat '''
                    echo Creating artifacts directory...
                    if not exist "artifacts" mkdir artifacts
                    
                    echo Installing Python dependencies...
                    pip install scikit-learn pandas numpy joblib || echo Some packages may already be installed
                    
                    echo Running training script locally...
                    cd jenkins
                    python train.py
                    
                    echo Moving trained model to artifacts...
                    if exist "iris_model.pkl" (
                        move iris_model.pkl "../artifacts/iris_model.pkl"
                        echo Model moved to artifacts successfully
                    ) else (
                        echo Model not generated, checking current directory...
                        dir
                    )
                    
                    cd ..
                    echo Checking artifacts directory...
                    dir artifacts
                '''
            }
        }
        
        stage('Verify Local Training') {
            steps {
                echo 'Verifying locally trained model...'
                bat '''
                    if exist "artifacts\\iris_model.pkl" (
                        echo SUCCESS: Local training completed!
                        echo Model file size:
                        for %%I in (artifacts\\iris_model.pkl) do echo %%~zI bytes
                    ) else (
                        echo WARNING: Local training failed, using existing model if available
                        if exist "models\\iris_model.pkl" (
                            echo Using existing model from models directory
                            copy models\\iris_model.pkl artifacts\\iris_model.pkl
                        ) else (
                            echo ERROR: No model available
                            exit /b 1
                        )
                    )
                '''
            }
        }
        
        stage('Copy Model to Server') {
            steps {
                echo 'Copying model to server directory...'
                bat '''
                    if not exist "serveur\\models" mkdir serveur\\models
                    copy artifacts\\iris_model.pkl serveur\\models\\iris_model.pkl
                    echo Model copied successfully
                    dir serveur\\models
                '''
            }
        }
        
        stage('Stop Previous Services') {
            steps {
                echo 'Stopping previous services...'
                bat '''
                    echo Killing Python processes on ports 8000 and 8501...
                    taskkill /F /IM python.exe 2>nul || echo No Python processes to kill
                    taskkill /F /IM uvicorn.exe 2>nul || echo No uvicorn processes to kill  
                    taskkill /F /IM streamlit.exe 2>nul || echo No streamlit processes to kill
                    
                    echo Stopping Docker containers...
                    docker-compose down --remove-orphans 2>nul || echo No containers to stop
                    docker stop iris-serveur iris-client 2>nul || echo No manual containers to stop
                    docker rm iris-serveur iris-client 2>nul || echo No manual containers to remove
                    
                    echo Waiting for ports to be freed...
                    timeout /t 3 /nobreak >nul 2>&1 || ping -n 3 127.0.0.1 >nul
                '''
            }
        }
        
        stage('Deploy Application') {
            steps {
                echo 'Deploying application...'
                bat '''
                    echo Attempting Docker Compose deployment...
                    docker-compose up -d --build 2>nul && (
                        echo Docker Compose deployment successful!
                        timeout /t 10 /nobreak >nul 2>&1 || ping -n 10 127.0.0.1 >nul
                        docker-compose ps
                        curl -f http://localhost:8000 --connect-timeout 5 || echo API not ready yet
                        goto :success
                    ) || (
                        echo Docker Compose failed, using Python fallback...
                        goto :fallback
                    )
                    
                    :fallback
                    echo.
                    echo ===== PYTHON FALLBACK DEPLOYMENT =====
                    echo.
                    
                    echo Installing FastAPI requirements...
                    cd serveur
                    pip install fastapi uvicorn joblib numpy scikit-learn 2>nul || echo FastAPI deps already installed
                    
                    echo Starting FastAPI server...
                    start /B /MIN python -m uvicorn app:app --host 0.0.0.0 --port 8000
                    
                    cd ..\\client
                    echo Installing Streamlit requirements...
                    pip install streamlit requests 2>nul || echo Streamlit deps already installed
                    
                    echo Starting Streamlit app...
                    start /B /MIN streamlit run app.py --server.port 8501 --server.address 0.0.0.0
                    
                    cd ..
                    echo.
                    echo Waiting for services to start...
                    timeout /t 15 /nobreak >nul 2>&1 || ping -n 15 127.0.0.1 >nul
                    
                    :success
                    echo.
                    echo ===== TESTING DEPLOYMENT =====
                    echo Testing FastAPI...
                    curl -f http://localhost:8000 --connect-timeout 10 || echo FastAPI not responding
                    
                    echo Testing Streamlit...
                    curl -f http://localhost:8501 --connect-timeout 10 || echo Streamlit not responding
                    
                    echo.
                    echo ===== DEPLOYMENT SUMMARY =====
                    echo Your Iris ML Application is running!
                    echo - Streamlit UI: http://localhost:8501
                    echo - FastAPI: http://localhost:8000
                    echo - API Docs: http://localhost:8000/docs
                    echo.
                    echo Docker containers:
                    docker ps | findstr iris || echo No Docker containers running
                    echo.
                    echo Python processes:
                    tasklist | findstr python.exe || echo No Python processes visible
                '''
            }
        }
    }
    
    post {
        always {
            echo 'Archiving artifacts...'
            archiveArtifacts artifacts: 'artifacts/**/*', allowEmptyArchive: true
        }
        
        success {
            echo 'Pipeline completed successfully!'
            
            bat '''
                echo.
                echo =========================================
                echo        DEPLOYMENT SUCCESS!
                echo =========================================
                echo.
                echo Your Iris ML Application is ready!
                echo.
                echo Access URLs:
                echo  - Main App (Streamlit): http://localhost:8501  
                echo  - API Server (FastAPI): http://localhost:8000
                echo  - API Documentation:    http://localhost:8000/docs
                echo.
                echo To test a prediction via API:
                echo curl -X POST "http://localhost:8000/predict" -H "Content-Type: application/json" -d "{\\"SepalLengthCm\\": 5.1, \\"SepalWidthCm\\": 3.5, \\"PetalLengthCm\\": 1.4, \\"PetalWidthCm\\": 0.2}"
                echo.
                echo To stop the application:
                echo   docker-compose down
                echo   OR kill Python processes manually
                echo =========================================
            '''
        }
        
        failure {
            echo 'Pipeline failed!'
            
            bat '''
                echo.
                echo =========================================
                echo           PIPELINE FAILURE  
                echo =========================================
                echo.
                echo Diagnostic information:
                echo.
                echo Python availability:
                python --version || echo Python not available
                echo.
                echo Docker availability:  
                docker --version || echo Docker not available
                echo.
                echo Port usage:
                netstat -an | findstr :8000 || echo Port 8000 free
                netstat -an | findstr :8501 || echo Port 8501 free
                echo.
                echo Artifacts status:
                dir artifacts 2>nul || echo No artifacts directory
                echo.
                echo Suggested fixes:
                echo 1. Ensure Python and Docker are installed
                echo 2. Check if ports 8000/8501 are already in use
                echo 3. Verify all dependencies are available
                echo =========================================
            '''
        }
    }
}