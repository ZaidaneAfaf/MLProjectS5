pipeline {
  agent any

  options {
    skipDefaultCheckout(true)
    timestamps()
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
    timeout(time: 45, unit: 'MINUTES')
  }
  triggers { githubPush() }

  /*************** PARAMÈTRES MODULAIRES ***************/
  parameters {
    choice(name: 'ENV', choices: ['dev', 'stage', 'prod'], description: 'Environnement cible (n’influence plus les noms des ressources existantes)')
    string(name: 'IMAGE_TAG', defaultValue: '', description: 'Tag image (vide = BUILD_NUMBER)')
    booleanParam(name: 'PUSH_LATEST', defaultValue: true, description: 'Pousser aussi :latest')
    choice(name: 'DEPLOY_METHOD', choices: ['acr-admin', 'managed-identity'], description: 'Méthode de pull ACR par le Web App')
    booleanParam(name: 'SKIP_TRAIN', defaultValue: false, description: 'Sauter l’entrainement si artifacts/iris_model.pkl déjà présent')
  }

  /*************** VARIABLES D’ENVIRONNEMENT ***************/
  environment {
    // Application / Image
    APP_NAME     = 'iris-ml-app'
    DOCKER_IMAGE = "${APP_NAME}"

    // Azure (noms EXACTS de tes ressources existantes)
    AZ_LOCATION  = 'germanywestcentral'
    AZ_RG        = 'ml_rg'          // ← ton Resource Group
    AZ_PLAN      = 'plan-jenkins'   // ← ton App Service Plan
    AZ_WEBAPP    = 'app-jenkis-ml'  // ← ta Web App

    // ACR
    AZ_ACR_NAME  = 'mlregitery123'
    AZ_ACR_LOGIN = 'mlregitery123.azurecr.io'

    // Tags calculés
    CALC_TAG     = "${params.IMAGE_TAG ?: BUILD_NUMBER}"
    IMG_LOCAL    = "${DOCKER_IMAGE}:${CALC_TAG}"
    IMG_LOCAL_L  = "${DOCKER_IMAGE}:latest"
    IMG_ACR      = "${AZ_ACR_LOGIN}/${DOCKER_IMAGE}:${CALC_TAG}"
    IMG_ACR_L    = "${AZ_ACR_LOGIN}/${DOCKER_IMAGE}:latest"
  }

  stages {
    stage('Checkout') {
      steps {
        milestone(1)
        echo '📦 Checkout repository...'
        checkout scm
      }
    }

    stage('Verify Environment & Project') {
      steps {
        echo '🔍 Checking tools & project files...'
        bat '''
          echo "=== Tools ==="
          git --version
          docker --version
          az --version

          echo.
          echo "=== Project Files ==="
          if exist "jenkins\\train.py" (echo OK: jenkins\\train.py) else (echo NO: jenkins\\train.py & exit /b 1)
          if exist "serveur\\app.py" (echo OK: serveur\\app.py) else (echo NO: serveur\\app.py & exit /b 1)
          if exist "serveur\\routes.py" (echo OK: serveur\\routes.py) else (echo NO: serveur\\routes.py & exit /b 1)
          if exist "Dockerfile" (echo OK: Dockerfile) else (echo NO: Dockerfile & exit /b 1)

          echo.
          echo "=== Data / Model presence (pre-train) ==="
          if exist "data\\Iris.csv" (echo OK: data\\Iris.csv) else (echo WARN: data\\Iris.csv missing - fallback sklearn)
          if exist "artifacts\\iris_model.pkl" (echo FOUND: artifacts\\iris_model.pkl) else (echo NOT YET: artifacts\\iris_model.pkl)
          if exist "models\\iris_model.pkl" (echo FOUND: models\\iris_model.pkl) else (echo NOT YET: models\\iris_model.pkl)
        '''
      }
    }

    stage('Train Model') {
      when { expression { return !params.SKIP_TRAIN } }
      steps {
        echo '🤖 Training ML model (inside Docker python:3.11-slim)...'
        bat '''
          if not exist "artifacts" mkdir artifacts

          docker run --rm -v "%CD%":/app -w /app python:3.11-slim sh -lc ^
            "pip install -q scikit-learn pandas numpy joblib && python jenkins/train.py"
          IF ERRORLEVEL 1 exit /b 1

          if exist artifacts\\iris_model.pkl (echo "✅ artifacts\\iris_model.pkl created") else (echo "❌ Model file missing" & exit /b 1)
        '''
      }
    }

    stage('Prepare Model for Image') {
      steps {
        echo '📁 Ensuring models/iris_model.pkl exists for image build...'
        bat '''
          if not exist "models" mkdir models
          if exist artifacts\\iris_model.pkl copy /Y artifacts\\iris_model.pkl models\\iris_model.pkl >NUL
          if exist models\\iris_model.pkl (echo OK: models\\iris_model.pkl) else (echo ❌ Missing models\\iris_model.pkl & exit /b 1)
        '''
      }
    }

    stage('Build Image') {
      steps {
        milestone(2)
        echo "🐳 Building image ${IMG_LOCAL}..."
        bat '''
          docker build --pull -t %IMG_LOCAL% .
          IF ERRORLEVEL 1 exit /b 1
          docker tag %IMG_LOCAL% %IMG_LOCAL_L%
          docker images | findstr /I "%APP_NAME%"
        '''
      }
    }

    stage('Azure Login + Ensure Resources') {
      steps {
        echo '🔐 Azure login (Service Principal) & ensure RG/ACR/Plan/WebApp...'
        withCredentials([
          string(credentialsId: 'az-client-id',       variable: 'AZ_CLIENT_ID'),
          string(credentialsId: 'az-client-secret',   variable: 'AZ_CLIENT_SECRET'),
          string(credentialsId: 'az-tenant-id',       variable: 'AZ_TENANT_ID'),
          string(credentialsId: 'az-subscription-id', variable: 'AZ_SUBSCRIPTION_ID')
        ]) {
          bat '''
            az login --service-principal -u %AZ_CLIENT_ID% -p %AZ_CLIENT_SECRET% --tenant %AZ_TENANT_ID%
            IF ERRORLEVEL 1 exit /b 1
            az account set --subscription %AZ_SUBSCRIPTION_ID%
            IF ERRORLEVEL 1 exit /b 1

            az provider register -n Microsoft.ContainerRegistry
            az provider register -n Microsoft.Web

            az group show -n %AZ_RG% || az group create -n %AZ_RG% -l %AZ_LOCATION%
            IF ERRORLEVEL 1 exit /b 1

            az acr show -n %AZ_ACR_NAME% || az acr create -n %AZ_ACR_NAME% -g %AZ_RG% --sku Basic --admin-enabled true
            IF ERRORLEVEL 1 exit /b 1

            az appservice plan show -g %AZ_RG% -n %AZ_PLAN% || az appservice plan create -g %AZ_RG% -n %AZ_PLAN% --is-linux --sku B1 -l %AZ_LOCATION%
            IF ERRORLEVEL 1 exit /b 1

            az webapp show -g %AZ_RG% -n %AZ_WEBAPP% || az webapp create -g %AZ_RG% -n %AZ_WEBAPP% -p %AZ_PLAN% --runtime "PYTHON:3.11"
            IF ERRORLEVEL 1 exit /b 1
          '''
        }
      }
    }

    stage('Push to ACR') {
      steps {
        echo '⬆️ Push image to ACR...'
        bat '''
          az acr login --name %AZ_ACR_NAME%
          IF ERRORLEVEL 1 exit /b 1

          docker tag %IMG_LOCAL% %IMG_ACR%
          docker push %IMG_ACR%
          IF ERRORLEVEL 1 exit /b 1

          IF "%PUSH_LATEST%"=="true" (
            docker tag %IMG_LOCAL_L% %IMG_ACR_L%
            docker push %IMG_ACR_L%
            IF ERRORLEVEL 1 exit /b 1
          )
        '''
      }
    }

    stage('Deploy to Web App') {
      steps {
        script {
          if (params.DEPLOY_METHOD == 'acr-admin') {
            withCredentials([usernamePassword(credentialsId: 'acr-admin', usernameVariable: 'ACR_USERNAME', passwordVariable: 'ACR_PASSWORD')]) {
              bat '''
                az webapp config container set -g %AZ_RG% -n %AZ_WEBAPP% ^
                  --container-image-name %IMG_ACR% ^
                  --container-registry-url https://%AZ_ACR_LOGIN% ^
                  --container-registry-user %ACR_USERNAME% ^
                  --container-registry-password %ACR_PASSWORD%
                IF ERRORLEVEL 1 exit /b 1

                az webapp config appsettings set -g %AZ_RG% -n %AZ_WEBAPP% --settings WEBSITES_PORT=80
                az webapp restart -g %AZ_RG% -n %AZ_WEBAPP%
                az webapp show -g %AZ_RG% -n %AZ_WEBAPP% --query defaultHostName -o tsv > webapp_fqdn.txt
              '''
            }
          } else { // managed-identity
            withCredentials([string(credentialsId: 'az-subscription-id', variable: 'AZ_SUBSCRIPTION_ID')]) {
              bat '''
                az webapp identity assign -g %AZ_RG% -n %AZ_WEBAPP%
                IF ERRORLEVEL 1 exit /b 1

                set PRINCIPAL=
                for /f "tokens=*" %%i in ('az webapp show -g %AZ_RG% -n %AZ_WEBAPP% --query identity.principalId -o tsv') do set PRINCIPAL=%%i

                az role assignment create --assignee %PRINCIPAL% --role "AcrPull" --scope /subscriptions/%AZ_SUBSCRIPTION_ID%/resourceGroups/%AZ_RG%/providers/Microsoft.ContainerRegistry/registries/%AZ_ACR_NAME%
                IF ERRORLEVEL 1 exit /b 1

                az webapp config container set -g %AZ_RG% -n %AZ_WEBAPP% ^
                  --container-image-name %IMG_ACR% ^
                  --container-registry-url https://%AZ_ACR_LOGIN%
                IF ERRORLEVEL 1 exit /b 1

                az webapp config appsettings set -g %AZ_RG% -n %AZ_WEBAPP% --settings WEBSITES_PORT=80
                az webapp restart -g %AZ_RG% -n %AZ_WEBAPP%
                az webapp show -g %AZ_RG% -n %AZ_WEBAPP% --query defaultHostName -o tsv > webapp_fqdn.txt
              '''
            }
          }
        }
      }
    }

    stage('Notes') {
      steps {
        echo '📋 Preparing deploy notes...'
        bat '''
          >  deploy.txt echo # DEPLOY INFO
          >> deploy.txt echo Env:^ %ENV%
          >> deploy.txt echo Image:^ %IMG_ACR%
          >> deploy.txt echo WebApp:^ %AZ_WEBAPP%
          >> deploy.txt echo RG:^ %AZ_RG%
          >> deploy.txt echo Location:^ %AZ_LOCATION%
          >> deploy.txt echo.
          >> deploy.txt echo URL:
          if exist webapp_fqdn.txt (
            type webapp_fqdn.txt >> deploy.txt
          ) else (
            echo N/A >> deploy.txt
          )
        '''
      }
    }
  }

  post {
    always {
      echo '📦 Archiving artifacts...'
      archiveArtifacts artifacts: 'artifacts/**, deploy.txt, webapp_fqdn.txt', allowEmptyArchive: true
    }
    success {
      echo '🎉 SUCCESS'
      bat '''
        if exist webapp_fqdn.txt (
          set /p FQDN=<webapp_fqdn.txt
          echo Open:   http://%FQDN%/
          echo Root:   http://%FQDN%/
          echo Predict (POST): http://%FQDN%/predict
        ) else (
          echo FQDN not found (open Azure portal).
        )
      '''
    }
    failure {
      echo '❌ PIPELINE FAILED - check logs'
    }
  }
}
