pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'iris-train'
        CONTAINER_NAME = 'iris-container'
        DOCKER_IMAGE_TAG = "${DOCKER_IMAGE}:${BUILD_NUMBER}"
        PYTHONIOENCODING = 'utf-8'
        PYTHONLEGACYWINDOWSSTDIO = '1'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Cloning repository...'
                checkout scm
            }
        }
        
        stage('Verify Environment') {
            steps {
                echo 'Checking environment...'
                bat '''
                    echo Current directory: %CD%
                    dir
                    echo.
                    echo Python version:
                    python --version || echo Python not found in PATH
                    echo.
                    echo Docker version:
                    docker --version
                    echo.
                    echo Docker Compose version:
                    docker-compose --version || docker compose version
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'Installing Python dependencies...'
                bat '''
                    echo Installing core ML packages...
                    pip install scikit-learn pandas numpy joblib psutil
                    
                    echo Installing TensorBoard and visualization...
                    pip install torch torchvision torchaudio tensorboard matplotlib --index-url https://download.pytorch.org/whl/cpu
                    
                    echo Installing API and web framework...
                    pip install fastapi uvicorn streamlit requests pydantic
                '''
            }
        }
        
        stage('Local Python Training') {
            steps {
                echo 'Training model with local Python...'
                bat '''
                    echo Creating artifacts directories...
                    if not exist "artifacts" mkdir artifacts
                    if not exist "artifacts\\tensorboard" mkdir artifacts\\tensorboard
                    if not exist "serveur\\models" mkdir serveur\\models
                    
                    echo Running training script...
                    cd jenkins
                    set PYTHONIOENCODING=utf-8
                    python train.py
                    
                    echo Moving trained models to artifacts and serveur...
                    if exist "*.pkl" (
                        copy *.pkl "..\\artifacts\\"
                        copy *.pkl "..\\serveur\\models\\"
                        echo Models copied successfully
                    )
                    
                    cd ..
                    echo Checking artifacts directory...
                    dir artifacts
                    
                    echo Checking TensorBoard logs...
                    if exist "artifacts\\tensorboard" (
                        dir artifacts\\tensorboard
                        echo TensorBoard logs available
                    ) else (
                        echo No TensorBoard logs found
                    )
                    
                    if exist "serveur\\models\\*.pkl" (
                        echo SUCCESS: Models available for deployment
                    ) else (
                        echo ERROR: No models available for deployment
                        exit /b 1
                    )
                '''
            }
        }
        
        stage('Fix Dockerfile Extension') {
            steps {
                echo 'Fixing Dockerfile.tensorboard extension...'
                bat '''
                    echo Renaming Dockerfile.tensorboard.txt to Dockerfile.tensorboard...
                    if exist "Dockerfile.tensorboard.txt" (
                        ren Dockerfile.tensorboard.txt Dockerfile.tensorboard
                        echo File renamed successfully
                    ) else (
                        echo Creating Dockerfile.tensorboard...
                        echo FROM tensorflow/tensorflow:2.13.0 > Dockerfile.tensorboard
                        echo RUN pip install psutil matplotlib >> Dockerfile.tensorboard
                        echo WORKDIR /app >> Dockerfile.tensorboard
                        echo EXPOSE 6006 >> Dockerfile.tensorboard
                        echo CMD ["tensorboard", "--logdir=/tensorboard_logs", "--host=0.0.0.0", "--port=6006", "--reload_interval=5"] >> Dockerfile.tensorboard
                        echo Dockerfile.tensorboard created
                    )
                    
                    dir Dockerfile.tensorboard*
                '''
            }
        }
        
        stage('Build TensorBoard Image') {
            steps {
                echo 'Building custom TensorBoard image...'
                bat '''
                    echo Building TensorBoard Docker image...
                    docker build -t iris-tensorboard:latest -f Dockerfile.tensorboard .
                    echo TensorBoard image built successfully
                    
                    docker images | findstr iris-tensorboard
                '''
            }
        }
        
        stage('Stop Previous Services') {
            steps {
                echo 'Stopping previous services...'
                bat '''
                    echo Killing Python processes...
                    taskkill /F /IM python.exe 2>nul || echo No Python processes to kill
                    taskkill /F /IM uvicorn.exe 2>nul || echo No uvicorn processes to kill  
                    taskkill /F /IM streamlit.exe 2>nul || echo No streamlit processes to kill
                    taskkill /F /IM tensorboard.exe 2>nul || echo No tensorboard processes to kill
                    
                    echo Stopping Docker containers...
                    docker-compose down --remove-orphans 2>nul || echo No containers to stop
                    docker stop iris-serveur iris-client iris-tensorboard 2>nul || echo No manual containers to stop
                    docker rm iris-serveur iris-client iris-tensorboard 2>nul || echo No manual containers to remove
                    
                    echo Cleaning up old images...
                    docker image prune -f 2>nul || echo No images to prune
                    
                    echo Waiting for ports to be freed...
                    timeout /t 5 /nobreak >nul 2>&1
                '''
            }
        }
        
        stage('Deploy Application') {
            steps {
                echo 'Deploying application with TensorBoard...'
                bat '''
                    echo Starting Docker Compose with TensorBoard...
                    docker-compose up -d --build
                    
                    echo Waiting for services to start...
                    timeout /t 25 /nobreak >nul 2>&1
                    
                    echo Checking container status...
                    docker-compose ps
                    
                    echo Testing services availability...
                    echo Testing API...
                    curl -f http://localhost:8000 --connect-timeout 10 --max-time 15 && (
                        echo ✅ API: RESPONDING
                    ) || (
                        echo ⚠️ API: NOT READY YET
                    )
                    
                    echo Testing Streamlit...
                    curl -f http://localhost:8501 --connect-timeout 10 --max-time 15 && (
                        echo ✅ STREAMLIT: RESPONDING  
                    ) || (
                        echo ⚠️ STREAMLIT: NOT READY YET
                    )
                    
                    echo Testing TensorBoard...
                    curl -f http://localhost:6006 --connect-timeout 10 --max-time 15 && (
                        echo ✅ TENSORBOARD: RESPONDING  
                    ) || (
                        echo ⚠️ TENSORBOARD: NOT READY YET - waiting additional time...
                        timeout /t 10 /nobreak >nul 2>&1
                        curl -f http://localhost:6006 --connect-timeout 10 --max-time 15 && (
                            echo ✅ TENSORBOARD: NOW RESPONDING
                        ) || (
                            echo ⚠️ TENSORBOARD: STILL STARTING
                        )
                    )
                    
                    echo Deployment completed
                '''
            }
        }
        
        stage('Verify Deployment') {
            steps {
                echo 'Verifying deployment...'
                script {
                    def apiWorking = false
                    def streamlitWorking = false
                    def tensorboardWorking = false
                    
                    try {
                        bat 'curl -f http://localhost:8000 --connect-timeout 10 --max-time 15'
                        apiWorking = true
                        echo "✅ API is responding"
                    } catch (Exception e) {
                        echo "⚠️ API not responding"
                    }
                    
                    try {
                        bat 'curl -f http://localhost:8501 --connect-timeout 10 --max-time 15'
                        streamlitWorking = true
                        echo "✅ Streamlit is responding"
                    } catch (Exception e) {
                        echo "⚠️ Streamlit not responding"
                    }
                    
                    try {
                        bat 'curl -f http://localhost:6006 --connect-timeout 10 --max-time 15'
                        tensorboardWorking = true
                        echo "✅ TensorBoard is responding"
                    } catch (Exception e) {
                        echo "⚠️ TensorBoard not responding"
                    }
                    
                    def workingServices = []
                    if (apiWorking) workingServices.add("API")
                    if (streamlitWorking) workingServices.add("Streamlit")
                    if (tensorboardWorking) workingServices.add("TensorBoard")
                    
                    echo "📊 Services status: ${workingServices.join(', ')}"
                    
                    if (workingServices.size() >= 2) {
                        echo "🎉 Deployment successful - services running: ${workingServices}"
                        currentBuild.result = 'SUCCESS'
                    } else if (workingServices.size() >= 1) {
                        echo "⚠️ Limited deployment - only ${workingServices} running"
                        currentBuild.result = 'UNSTABLE'
                    } else {
                        echo "❌ No services responding"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Archiving artifacts and logs...'
            archiveArtifacts artifacts: 'artifacts/**/*', allowEmptyArchive: true
            archiveArtifacts artifacts: 'serveur/models/**/*', allowEmptyArchive: true
            
            bat '''
                echo.
                echo ===== DEPLOYMENT COMPLETE =====
                echo.
                echo Docker containers status:
                docker-compose ps || echo Docker compose not available
                echo.
                echo Port usage:
                netstat -an | findstr ":8000" && echo "Port 8000 (API): IN USE" || echo "Port 8000 (API): FREE"
                netstat -an | findstr ":8501" && echo "Port 8501 (Streamlit): IN USE" || echo "Port 8501 (Streamlit): FREE"
                netstat -an | findstr ":6006" && echo "Port 6006 (TensorBoard): IN USE" || echo "Port 6006 (TensorBoard): FREE"
                echo.
                echo Application URLs:
                echo 🌐 Streamlit UI: http://localhost:8501
                echo 🔗 FastAPI: http://localhost:8000
                echo 📚 API Docs: http://localhost:8000/docs
                echo 📊 TensorBoard: http://localhost:6006
            '''
        }
        
        success {
            echo '🎉 Pipeline completed successfully!'
            
            bat '''
                echo.
                echo =========================================
                echo        DEPLOYMENT SUCCESS!
                echo =========================================
                echo.
                echo 🌸 Iris ML Application with TensorBoard
                echo.
                echo 🌐 Access URLs:
                echo  - Main App: http://localhost:8501  
                echo  - API: http://localhost:8000
                echo  - Docs: http://localhost:8000/docs
                echo  - TensorBoard: http://localhost:6006
                echo.
                echo 📊 TensorBoard Features:
                echo  - Real-time CPU/RAM monitoring during training
                echo  - Model performance comparison
                echo  - Confusion matrices visualization
                echo.
                echo 🧪 Test prediction:
                curl -X POST "http://localhost:8000/predict" ^
                  -H "Content-Type: application/json" ^
                  -d "{\\"SepalLengthCm\\": 5.1, \\"SepalWidthCm\\": 3.5, \\"PetalLengthCm\\": 1.4, \\"PetalWidthCm\\": 0.2}" 2>nul || echo Test command ready
                echo.
                echo 🛑 To stop: docker-compose down
                echo =========================================
            '''
        }
        
        unstable {
            echo '⚠️ Pipeline completed with warnings'
            
            bat '''
                echo.
                echo =========================================
                echo    DEPLOYMENT COMPLETED WITH WARNINGS
                echo =========================================
                echo.
                echo Some services may still be starting up.
                echo Please check manually:
                echo  - http://localhost:8501
                echo  - http://localhost:8000  
                echo  - http://localhost:6006
                echo.
                echo Check Docker containers:
                echo docker-compose ps
                echo =========================================
            '''
        }
        
        failure {
            echo '❌ Pipeline failed'
            
            bat '''
                echo.
                echo =========================================
                echo         PIPELINE FAILURE
                echo =========================================
                echo.
                echo Troubleshooting steps:
                echo 1. Check Docker is running
                echo 2. Check Python dependencies
                echo 3. Check training logs above
                echo 4. Verify data files exist
                echo.
                echo Cleanup commands:
                echo docker-compose down
                echo =========================================
            '''
        }
    }
}