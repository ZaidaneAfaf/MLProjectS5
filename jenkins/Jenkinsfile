pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'iris-train'
        CONTAINER_NAME = 'iris-container'
        DOCKER_IMAGE_TAG = "${DOCKER_IMAGE}:${BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Cloning repository...'
                checkout scm
            }
        }
        
        stage('Verify Environment') {
            steps {
                echo 'Checking environment...'
                bat '''
                    echo Current directory: %CD%
                    dir
                    echo.
                    echo Docker version:
                    docker --version
                    echo.
                    echo Docker Compose version:
                    docker-compose --version
                    echo.
                    echo Git version:
                    git --version
                '''
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                bat '''
                    echo Building image: %DOCKER_IMAGE_TAG%
                    docker build -t %DOCKER_IMAGE_TAG% -f jenkins/Dockerfile .

                    echo.
                    echo Verifying image was built:
                    docker images | findstr %DOCKER_IMAGE%
                '''
            }
        }
        
        stage('Run Training') {
            steps {
                echo 'Starting ML training...'
                bat '''
                    echo Creating artifacts directory...
                    if not exist "artifacts" mkdir artifacts
                    
                    echo Running Docker container for training...
                    docker run --name %CONTAINER_NAME%-%BUILD_NUMBER% --rm -v "%WORKSPACE%/artifacts:/app/artifacts" %DOCKER_IMAGE_TAG%
                    
                    echo Training completed. Checking artifacts...
                    dir artifacts
                '''
            }
        }
        
        stage('Verify Artifacts') {
            steps {
                echo 'Verifying generated artifacts...'
                bat '''
                    echo Contents of artifacts directory:
                    if exist "artifacts" (
                        dir artifacts
                        echo.
                        if exist "artifacts\\iris_model.pkl" (
                            echo SUCCESS: Model file found!
                            echo File size:
                            for %%I in (artifacts\\iris_model.pkl) do echo %%~zI bytes
                        ) else (
                            echo ERROR: Model file not found!
                            exit /b 1
                        )
                    ) else (
                        echo ERROR: Artifacts directory not found!
                        exit /b 1
                    )
                '''
            }
        }
        
        stage('Copy Model to Server') {
            steps {
                echo 'Copying model to server directory...'
                bat '''
                    if not exist "serveur\\models" mkdir serveur\\models
                    copy artifacts\\iris_model.pkl serveur\\models\\iris_model.pkl
                    echo Model copied successfully
                    dir serveur\\models
                '''
            }
        }
        
        stage('Stop Previous Deployment') {
            steps {
                echo 'Stopping any running containers...'
                bat '''
                    docker-compose down --remove-orphans || echo No containers to stop
                    
                    echo Removing any existing containers...
                    docker container ls -aq -f "name=iris" | findstr . && docker container rm -f $(docker container ls -aq -f "name=iris") || echo No iris containers to remove
                    
                    echo Pruning unused resources...
                    docker system prune -f
                '''
            }
        }
        
        stage('Deploy Application') {
            steps {
                echo 'Deploying application...'
                bat '''
                    echo Building and starting services...
                    docker-compose up -d --build --force-recreate
                    
                    echo Waiting for services to be ready...
                    timeout /t 15
                    
                    echo Checking if services are running...
                    docker-compose ps
                    
                    echo Testing API health...
                    timeout /t 5
                    curl -f http://localhost:8000 || echo API not yet ready
                    
                    echo.
                    echo =====================================
                    echo   DEPLOYMENT COMPLETED SUCCESSFULLY
                    echo =====================================
                    echo Application is now running!
                    echo - Streamlit UI: http://localhost:8501
                    echo - FastAPI docs: http://localhost:8000/docs
                    echo - API health: http://localhost:8000
                    echo =====================================
                '''
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up Docker build resources...'
            bat '''
                echo Removing training image: %DOCKER_IMAGE_TAG%
                docker rmi %DOCKER_IMAGE_TAG% 2>nul || echo Training image already removed
                
                echo Cleaning up dangling images...
                docker image prune -f 2>nul || echo No dangling images to clean
                
                echo Build cleanup completed.
            '''
        }
        
        success {
            echo 'Pipeline completed successfully!'
            
            // Archive artifacts
            archiveArtifacts artifacts: 'artifacts/**/*', allowEmptyArchive: false
            
            // Display final summary
            bat '''
                echo.
                echo =====================================
                echo   FINAL DEPLOYMENT STATUS - SUCCESS
                echo =====================================
                echo.
                echo Services running:
                docker-compose ps
                echo.
                echo Generated artifacts:
                dir artifacts 2>nul || echo No artifacts directory
                echo.
                echo Model in server:
                dir serveur\\models 2>nul || echo No models directory
                echo.
                echo *** ACCESS YOUR APPLICATION ***
                echo - Streamlit UI: http://localhost:8501
                echo - FastAPI API: http://localhost:8000
                echo - API Documentation: http://localhost:8000/docs
                echo.
                echo To stop the application later, run:
                echo   docker-compose down
                echo =====================================
            '''
        }
        
        failure {
            echo 'Pipeline failed!'
            
            // Stop any partial deployment
            bat '''
                echo Cleaning up failed deployment...
                docker-compose down --remove-orphans 2>nul || echo No deployment to clean
            '''
            
            // Enhanced debug information
            bat '''
                echo.
                echo =====================================
                echo         FAILURE DEBUG INFO
                echo =====================================
                echo Current directory: %CD%
                dir
                echo.
                echo Artifacts status:
                if exist "artifacts" (
                    echo Artifacts directory exists:
                    dir artifacts
                ) else (
                    echo Artifacts directory missing
                )
                echo.
                echo Server models status:
                if exist "serveur\\models" (
                    echo Models directory exists:
                    dir serveur\\models
                ) else (
                    echo Models directory missing
                )
                echo.
                echo Docker images:
                docker images | findstr iris || echo No iris images found
                echo.
                echo Docker containers:
                docker ps -a | findstr iris || echo No iris containers found
                echo.
                echo Docker Compose status:
                docker-compose ps || echo No compose services running
                echo.
                echo Docker logs (last 20 lines each service):
                echo --- Serveur logs ---
                docker-compose logs --tail=20 serveur 2>nul || echo No serveur logs
                echo --- Client logs ---
                docker-compose logs --tail=20 client 2>nul || echo No client logs
                echo =====================================
            '''
        }
    }
}