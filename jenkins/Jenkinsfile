pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'iris-train'
        CONTAINER_NAME = 'iris-container'
        DOCKER_IMAGE_TAG = "${DOCKER_IMAGE}:${BUILD_NUMBER}"
        PYTHONIOENCODING = 'utf-8'
        PYTHONLEGACYWINDOWSSTDIO = '1'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Cloning repository...'
                checkout scm
            }
        }
        
        stage('Verify Environment') {
            steps {
                echo 'Checking environment...'
                bat '''
                    echo Current directory: %CD%
                    dir
                    echo.
                    echo Python version:
                    python --version || echo Python not found in PATH
                    echo.
                    echo Docker version:
                    docker --version
                    echo.
                    echo Docker Compose version:
                    docker-compose --version || docker compose version
                '''
            }
        }
        
        stage('Local Python Training') {
            steps {
                echo 'Training model with local Python...'
                bat '''
                    echo Creating artifacts directory...
                    if not exist "artifacts" mkdir artifacts
                    if not exist "logs\\tensorboard" mkdir logs\\tensorboard
                    
                    echo Installing Python dependencies...
                    pip install scikit-learn pandas numpy joblib psutil tensorboard torch torchvision || echo Some packages may already be installed
                    
                    echo Running training script locally...
                    cd jenkins
                    set PYTHONIOENCODING=utf-8
                    python train.py
                    
                    echo Moving trained models to artifacts...
                    cd ..
                    if exist "models\\*.pkl" (
                        xcopy /Y /I models\\*.pkl artifacts\\
                        echo Models moved to artifacts successfully
                    ) else (
                        echo ERROR: No models generated
                        exit /b 1
                    )
                    
                    echo Checking artifacts directory...
                    dir artifacts
                    
                    echo.
                    echo ==========================================
                    echo üìä TENSORBOARD LOGS DISPONIBLES
                    echo ==========================================
                    echo Logs sauvegard√©s dans: logs\\tensorboard
                    dir logs\\tensorboard
                    echo.
                    echo Pour visualiser:
                    echo tensorboard --logdir=logs/tensorboard --port=6006
                    echo Puis ouvrir: http://localhost:6006
                    echo ==========================================
                '''
            }
        }
        
        stage('Copy Model to Server') {
            steps {
                echo 'Copying models to server directory...'
                bat '''
                    if not exist "serveur\\models" mkdir serveur\\models
                    xcopy /Y artifacts\\*.pkl serveur\\models\\
                    echo Models copied successfully
                    dir serveur\\models
                '''
            }
        }
        
        stage('Stop Previous Services') {
            steps {
                echo 'Stopping previous services...'
                bat '''
                    echo Killing Python processes...
                    taskkill /F /IM python.exe 2>nul || echo No Python processes to kill
                    taskkill /F /IM uvicorn.exe 2>nul || echo No uvicorn processes to kill  
                    taskkill /F /IM streamlit.exe 2>nul || echo No streamlit processes to kill
                    taskkill /F /IM tensorboard.exe 2>nul || echo No tensorboard processes to kill
                    
                    echo Stopping Docker containers...
                    docker-compose down --remove-orphans 2>nul || echo No containers to stop
                    docker stop iris-serveur iris-client 2>nul || echo No manual containers to stop
                    docker rm iris-serveur iris-client 2>nul || echo No manual containers to remove
                    
                    echo Waiting for ports to be freed...
                    timeout /t 5 /nobreak >nul 2>&1 || ping -n 5 127.0.0.1 >nul
                '''
            }
        }
        
        stage('Deploy Application') {
            steps {
                echo 'Deploying application...'
                bat '''
                    echo Starting Docker Compose deployment...
                    docker-compose up -d --build && (
                        echo Docker Compose deployment successful!
                        timeout /t 15 /nobreak >nul 2>&1 || ping -n 15 127.0.0.1 >nul
                        
                        echo Checking container status...
                        docker-compose ps
                        
                        echo Testing services...
                        curl -f http://localhost:8000 --connect-timeout 10 && (
                            echo API: RESPONDING
                        ) || (
                            echo API: NOT READY YET
                        )
                        
                        curl -f http://localhost:8501 --connect-timeout 10 && (
                            echo STREAMLIT: RESPONDING  
                        ) || (
                            echo STREAMLIT: NOT READY YET
                        )
                        
                        echo Docker deployment completed
                        
                    ) || (
                        echo Docker Compose failed, using Python fallback...
                        
                        cd serveur
                        pip install fastapi uvicorn joblib numpy scikit-learn pandas pydantic 2>nul || echo FastAPI deps installed
                        start /B /MIN cmd /c "python -m uvicorn app:app --host 0.0.0.0 --port 8000"
                        
                        cd ..\\client
                        pip install streamlit requests pandas numpy 2>nul || echo Streamlit deps installed
                        start /B /MIN cmd /c "streamlit run app.py --server.port 8501 --server.address 0.0.0.0"
                        
                        cd ..
                        timeout /t 20 /nobreak >nul 2>&1 || ping -n 20 127.0.0.1 >nul
                        
                        echo Python fallback completed
                    )
                '''
            }
        }
        
        stage('Start TensorBoard') {
            steps {
                echo 'Starting TensorBoard server...'
                bat '''
                    echo Launching TensorBoard in background...
                    start /B /MIN cmd /c "tensorboard --logdir=logs/tensorboard --port=6006 --host=0.0.0.0"
                    
                    timeout /t 5 /nobreak >nul 2>&1 || ping -n 5 127.0.0.1 >nul
                    
                    echo.
                    echo ==========================================
                    echo üìä TENSORBOARD LANC√â
                    echo ==========================================
                    echo URL: http://localhost:6006
                    echo ==========================================
                '''
            }
        }
        
        stage('Verify Deployment') {
            steps {
                echo 'Verifying deployment...'
                script {
                    def apiWorking = false
                    def streamlitWorking = false
                    def tensorboardWorking = false
                    
                    try {
                        bat 'curl -f http://localhost:8000 --connect-timeout 5 --max-time 10'
                        apiWorking = true
                        echo "‚úÖ API is responding"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è API not responding"
                    }
                    
                    try {
                        bat 'curl -f http://localhost:8501 --connect-timeout 5 --max-time 10'
                        streamlitWorking = true
                        echo "‚úÖ Streamlit is responding"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Streamlit not responding"
                    }
                    
                    try {
                        bat 'curl -f http://localhost:6006 --connect-timeout 5 --max-time 10'
                        tensorboardWorking = true
                        echo "‚úÖ TensorBoard is responding"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è TensorBoard not responding"
                    }
                    
                    if (apiWorking || streamlitWorking) {
                        echo "üéâ Deployment successful - at least one service is running!"
                        currentBuild.result = 'SUCCESS'
                    } else {
                        echo "‚ö†Ô∏è Services may still be starting up..."
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Archiving artifacts...'
            archiveArtifacts artifacts: 'artifacts/**/*', allowEmptyArchive: true
            archiveArtifacts artifacts: 'logs/tensorboard/**/*', allowEmptyArchive: true
            
            bat '''
                echo.
                echo ===== DEPLOYMENT STATUS =====
                echo.
                echo Docker containers:
                docker ps | findstr iris || echo No Docker containers running
                echo.
                echo Port status:
                netstat -an | findstr :8000 && echo "Port 8000 (API): IN USE" || echo "Port 8000 (API): FREE"
                netstat -an | findstr :8501 && echo "Port 8501 (Streamlit): IN USE" || echo "Port 8501 (Streamlit): FREE"
                netstat -an | findstr :6006 && echo "Port 6006 (TensorBoard): IN USE" || echo "Port 6006 (TensorBoard): FREE"
                echo.
                echo Your application should be available at:
                echo  - Streamlit UI: http://localhost:8501
                echo  - FastAPI: http://localhost:8000
                echo  - API Docs: http://localhost:8000/docs
                echo  - TensorBoard: http://localhost:6006
                echo ===============================
            '''
        }
        
        success {
            echo 'üéâ Pipeline completed successfully!'
            
            bat '''
                echo.
                echo =========================================
                echo        DEPLOYMENT SUCCESS!
                echo =========================================
                echo.
                echo Your Iris ML Application is ready!
                echo.
                echo üåê Access URLs:
                echo  - Main App: http://localhost:8501  
                echo  - API: http://localhost:8000
                echo  - Docs: http://localhost:8000/docs
                echo  - TensorBoard: http://localhost:6006
                echo.
                echo üìä TensorBoard Features:
                echo  - CPU/RAM usage par mod√®le
                echo  - Courbes de consommation
                echo  - Comparaison des performances
                echo  - Histogrammes de ressources
                echo.
                echo üß™ Test prediction:
                echo curl -X POST "http://localhost:8000/predict" ^
                echo      -H "Content-Type: application/json" ^
                echo      -d "{\\"SepalLengthCm\\": 5.1, \\"SepalWidthCm\\": 3.5, \\"PetalLengthCm\\": 1.4, \\"PetalWidthCm\\": 0.2}"
                echo.
                echo üõë To stop: docker-compose down
                echo =========================================
            '''
        }
        
        unstable {
            echo '‚ö†Ô∏è Pipeline completed with warnings'
            
            bat '''
                echo.
                echo =========================================
                echo    DEPLOYMENT COMPLETED WITH WARNINGS
                echo =========================================
                echo.
                echo Services may still be starting up.
                echo Please check manually:
                echo  - http://localhost:8501
                echo  - http://localhost:8000
                echo  - http://localhost:6006
                echo =========================================
            '''
        }
        
        failure {
            echo '‚ùå Pipeline failed'
            
            bat '''
                echo.
                echo =========================================
                echo         PIPELINE FAILURE
                echo =========================================
                echo.
                echo Check the logs above for errors.
                echo Verify Docker and Python are working.
                echo =========================================
            '''
        }
    }
}