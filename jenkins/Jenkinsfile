pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'iris-train'
        CONTAINER_NAME = 'iris-container'
        DOCKER_IMAGE_TAG = "${DOCKER_IMAGE}:${BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Cloning repository...'
                checkout scm
            }
        }
        
        stage('Verify Environment') {
            steps {
                echo 'Checking environment...'
                bat '''
                    echo Current directory: %CD%
                    dir
                    echo.
                    echo Python version:
                    python --version || echo Python not found in PATH
                    echo.
                    echo Docker version:
                    docker --version
                '''
            }
        }
        
        stage('Local Python Training') {
            steps {
                echo 'Training model with local Python (no Docker)...'
                bat '''
                    echo Creating artifacts directory...
                    if not exist "artifacts" mkdir artifacts
                    
                    echo Installing Python dependencies...
                    pip install scikit-learn pandas numpy joblib || echo Some packages may already be installed
                    
                    echo Running training script locally...
                    cd jenkins
                    python train.py
                    
                    echo Moving trained model to artifacts...
                    if exist "iris_model.pkl" (
                        move iris_model.pkl "../artifacts/iris_model.pkl"
                        echo Model moved to artifacts successfully
                    ) else (
                        echo Model not generated, checking current directory...
                        dir
                    )
                    
                    cd ..
                    echo Checking artifacts directory...
                    dir artifacts
                '''
            }
        }
        
        stage('Verify Local Training') {
            steps {
                echo 'Verifying locally trained model...'
                bat '''
                    if exist "artifacts\\iris_model.pkl" (
                        echo SUCCESS: Local training completed!
                        echo Model file size:
                        for %%I in (artifacts\\iris_model.pkl) do echo %%~zI bytes
                    ) else (
                        echo WARNING: Local training failed, using existing model if available
                        if exist "models\\iris_model.pkl" (
                            echo Using existing model from models directory
                            copy models\\iris_model.pkl artifacts\\iris_model.pkl
                        ) else (
                            echo ERROR: No model available
                            exit /b 1
                        )
                    )
                '''
            }
        }
        
        stage('Copy Model to Server') {
            steps {
                echo 'Copying model to server directory...'
                bat '''
                    if not exist "serveur\\models" mkdir serveur\\models
                    copy artifacts\\iris_model.pkl serveur\\models\\iris_model.pkl
                    echo Model copied successfully
                    dir serveur\\models
                '''
            }
        }
        
        stage('Build Local Docker Images') {
            steps {
                echo 'Building Docker images from local context...'
                bat '''
                    echo Building serveur image...
                    docker build -t iris-serveur:local ./serveur/ --no-cache --pull=never || (
                        echo "Serveur build failed, trying with different base image..."
                        echo "Checking available Python images..."
                        docker images | findstr python
                    )
                    
                    echo Building client image...
                    docker build -t iris-client:local ./client/ --no-cache --pull=never || (
                        echo "Client build failed, trying with different base image..."
                        echo "Checking available Python images..."
                        docker images | findstr python
                    )
                    
                    echo Checking built images:
                    docker images | findstr iris
                '''
            }
        }
        
        stage('Stop Previous Services') {
            steps {
                echo 'Stopping previous services...'
                bat '''
                    docker-compose down --remove-orphans 2>nul || echo No services to stop
                    docker container prune -f 2>nul
                '''
            }
        }
        
        stage('Deploy with Local Images') {
            steps {
                echo 'Deploying with locally built images...'
                bat '''
                    echo Starting services...
                    docker-compose up -d --force-recreate || (
                        echo "Docker Compose failed, trying manual container start..."
                        
                        echo "Starting serveur container..."
                        docker run -d --name iris-serveur -p 8000:8000 -v "%CD%\\serveur\\models:/app/models" iris-serveur:local 2>nul || echo "Serveur start failed"
                        
                        echo "Starting client container..."
                        docker run -d --name iris-client -p 8501:8501 iris-client:local 2>nul || echo "Client start failed"
                    )
                    
                    echo Waiting for services to start...
                    timeout /t 10 /nobreak >nul 2>&1 || ping -n 10 127.0.0.1 >nul
                    
                    echo Checking running containers:
                    docker ps
                    
                    echo Testing API connectivity...
                    curl -f http://localhost:8000 --connect-timeout 5 || (
                        echo "API test failed, checking logs..."
                        docker logs iris-serveur 2>nul || echo "No serveur logs"
                    )
                '''
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up...'
            bat '''
                echo Cleanup completed
            '''
        }
        
        success {
            echo 'Pipeline completed successfully!'
            
            archiveArtifacts artifacts: 'artifacts/**/*', allowEmptyArchive: true
            
            bat '''
                echo.
                echo =====================================
                echo    LOCAL DEPLOYMENT SUCCESS!
                echo =====================================
                echo.
                echo Your application should be running at:
                echo - Streamlit UI: http://localhost:8501
                echo - FastAPI: http://localhost:8000
                echo.
                echo Running containers:
                docker ps | findstr iris || echo No iris containers running
                echo.
                echo To test the API manually:
                echo curl http://localhost:8000
                echo =====================================
            '''
        }
        
        failure {
            echo 'Pipeline failed! Trying fallback deployment...'
            
            bat '''
                echo.
                echo =====================================
                echo      FALLBACK DEPLOYMENT
                echo =====================================
                echo.
                echo Attempting direct Python deployment...
                
                echo Installing requirements for serveur...
                cd serveur
                pip install -r requirements.txt 2>nul || echo Requirements installation failed
                
                echo Starting FastAPI server in background...
                start /B python -m uvicorn app:app --host 0.0.0.0 --port 8000
                
                cd ..\\client
                echo Installing requirements for client...
                pip install -r requirements.txt 2>nul || echo Requirements installation failed
                
                echo Starting Streamlit in background...
                start /B streamlit run app.py --server.port 8501 --server.address 0.0.0.0
                
                cd ..
                echo.
                echo Fallback deployment attempted!
                echo Check manually:
                echo - http://localhost:8000 for API
                echo - http://localhost:8501 for Streamlit
                echo =====================================
            '''
        }
    }
}