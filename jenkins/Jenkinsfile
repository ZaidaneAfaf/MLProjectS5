pipeline {
  agent any

  options {
    skipDefaultCheckout(true)
    timestamps()
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
    timeout(time: 45, unit: 'MINUTES')
  }
  triggers { githubPush() }

  /*************** PARAMÈTRES ***************/
  parameters {
    choice(name: 'ENV', choices: ['dev', 'stage', 'prod'], description: 'Environnement (info)')
    string(name: 'IMAGE_TAG', defaultValue: '', description: 'Tag image (vide = BUILD_NUMBER)')
    booleanParam(name: 'PUSH_LATEST', defaultValue: true, description: 'Pousser aussi :latest')
    choice(name: 'DEPLOY_METHOD', choices: ['managed-identity', 'acr-admin'], description: 'ACR pull par Managed Identity (recommandé) ou compte admin ACR')
    booleanParam(name: 'SKIP_TRAIN', defaultValue: false, description: "Sauter l’entrainement si non nécessaire")
    booleanParam(name: 'RUN_SMOKE_AFTER_DEPLOY', defaultValue: true, description: 'Tester / après déploiement (front et back)')
    booleanParam(name: 'FAIL_ON_SMOKE', defaultValue: false, description: 'Échouer si Smoke Test KO')
  }

  /*************** VARIABLES ***************/
  environment {
    // ACR / Azure
    AZ_LOCATION  = 'germanywestcentral'
    AZ_RG        = 'ml_rg'
    AZ_PLAN      = 'plan-jenkins'

    AZ_ACR_NAME  = 'mlregitery123'
    AZ_ACR_LOGIN = 'mlregitery123.azurecr.io'

    // Backend (FastAPI)
    BACK_APP_NAME   = 'iris-ml-app'
    BACK_WEBAPP     = 'app-jenkis-ml'
    BACK_APP_PORT   = '80'
    BACK_IMG_LOCAL  = "${BACK_APP_NAME}:${params.IMAGE_TAG ?: BUILD_NUMBER}"
    BACK_IMG_LOCAL_L= "${BACK_APP_NAME}:latest"
    BACK_IMG_ACR    = "${AZ_ACR_LOGIN}/${BACK_APP_NAME}:${params.IMAGE_TAG ?: BUILD_NUMBER}"
    BACK_IMG_ACR_L  = "${AZ_ACR_LOGIN}/${BACK_APP_NAME}:latest"
    BACK_STARTUP    = "python -m uvicorn serveur.app:app --host 0.0.0.0 --port ${BACK_APP_PORT}"

    // Front (Streamlit)
    FRONT_APP_NAME   = 'iris-ml-front'
    FRONT_WEBAPP     = 'app-jenkis-ml-front'
    FRONT_APP_PORT   = '8501'
    FRONT_IMG_LOCAL  = "${FRONT_APP_NAME}:${params.IMAGE_TAG ?: BUILD_NUMBER}"
    FRONT_IMG_LOCAL_L= "${FRONT_APP_NAME}:latest"
    FRONT_IMG_ACR    = "${AZ_ACR_LOGIN}/${FRONT_APP_NAME}:${params.IMAGE_TAG ?: BUILD_NUMBER}"
    FRONT_IMG_ACR_L  = "${AZ_ACR_LOGIN}/${FRONT_APP_NAME}:latest"

    // URL backend (utilisé par le front)
    BACKEND_URL      = "https://${BACK_WEBAPP}.azurewebsites.net"
  }

  stages {

    stage('Checkout') {
      steps {
        milestone(1)
        echo '📦 Checkout repository...'
        checkout scm
      }
    }

    stage('Verify Environment & Project') {
      steps {
        echo '🔍 Checking tools & project files...'
        bat '''
          echo "=== Tools ==="
          git --version
          docker --version
          az --version
          echo.

          echo "=== Project files: backend ==="
          if exist "serveur\\app.py" (echo OK: serveur\\app.py) else (echo NO: serveur\\app.py & exit /b 1)
          if exist "Dockerfile" (echo OK: Dockerfile (backend)) else (echo NO: Dockerfile (backend) & exit /b 1)

          echo.
          echo "=== Project files: front ==="
          if exist "client\\Dockerfile" (echo OK: client\\Dockerfile) else (echo NO: client\\Dockerfile & exit /b 1)
          if exist "client\\requirements.txt" (echo OK: client\\requirements.txt) else (echo NO: client\\requirements.txt & exit /b 1)
          if exist "client\\app.py" (echo OK: client\\app.py) else (echo NO: client\\app.py & exit /b 1)

          echo.
          echo "=== Data / Model presence (pre-train) ==="
          if exist "data\\Iris.csv" (echo OK: data\\Iris.csv) else (echo WARN: data\\Iris.csv manquant)
          if exist "models\\iris_model.pkl" (echo FOUND: models\\iris_model.pkl) else (echo NOT YET: models\\iris_model.pkl)
        '''
      }
    }

    stage('Train Model (optional)') {
      when { expression { return !params.SKIP_TRAIN } }
      steps {
        echo '🤖 Train model inside python:3.11-slim (ne modifie pas ton script)...'
        bat '''
          if not exist "artifacts" mkdir artifacts
          if not exist "artifacts\\data" mkdir artifacts\\data
          if not exist "artifacts\\models" mkdir artifacts\\models

          docker run --rm ^
            -v "%CD%":/app ^
            -v "%CD%\\artifacts\\data":/app/data ^
            -v "%CD%\\artifacts\\models":/app/models ^
            -w /app python:3.11-slim sh -lc ^
              "set -e; \
               mkdir -p /app/data /app/models; \
               [ -f /app/data/Iris.csv ] || cp -f /app/data/Iris.csv /dev/null 2>/dev/null || true; \
               pip install -q scikit-learn pandas numpy joblib && \
               python jenkins/train.py"

          IF ERRORLEVEL 1 exit /b 1

          if exist artifacts\\models\\*.pkl (echo "✅ Models saved under artifacts\\models") else (echo "ℹ️ No model in artifacts\\models")
          if exist artifacts\\data\\iris_test.json (echo "✅ Test set saved under artifacts\\data\\iris_test.json") else (echo "ℹ️ iris_test.json absent (ok)")
        '''
      }
    }

    stage('Prepare Model for Backend Image') {
      steps {
        echo '📁 Ensure models/iris_model.pkl for image build (backend)...'
        bat '''
          if not exist "models" mkdir models
          if exist artifacts\\models\\iris_model.pkl copy /Y artifacts\\models\\iris_model.pkl models\\iris_model.pkl >NUL
          if exist artifacts\\iris_model.pkl copy /Y artifacts\\iris_model.pkl models\\iris_model.pkl >NUL
          if exist models\\iris_model.pkl (echo OK: models\\iris_model.pkl) else (echo ⚠️ Missing models\\iris_model.pkl & echo "continue (backend peut démarrer sans)" )
        '''
      }
    }

    stage('Build Backend Image') {
      steps {
        milestone(2)
        echo "🐳 Build backend image %BACK_IMG_LOCAL% ..."
        bat '''
          docker build --pull -t %BACK_IMG_LOCAL% .
          IF ERRORLEVEL 1 exit /b 1
          docker tag %BACK_IMG_LOCAL% %BACK_IMG_LOCAL_L%
        '''
      }
    }

    stage('Build Front Image') {
      steps {
        echo "🎨 Build front image %FRONT_IMG_LOCAL% (client/Dockerfile)..."
        bat '''
          docker build --pull -t %FRONT_IMG_LOCAL% -f client\\Dockerfile client
          IF ERRORLEVEL 1 exit /b 1
          docker tag %FRONT_IMG_LOCAL% %FRONT_IMG_LOCAL_L%
        '''
      }
    }

    stage('Azure Login + Ensure Resources') {
      steps {
        echo '🔐 Azure login (SP) & ensure RG/Plan/WebApps...'
        withCredentials([
          string(credentialsId: 'az-client-id',       variable: 'AZ_CLIENT_ID'),
          string(credentialsId: 'az-client-secret',   variable: 'AZ_CLIENT_SECRET'),
          string(credentialsId: 'az-tenant-id',       variable: 'AZ_TENANT_ID'),
          string(credentialsId: 'az-subscription-id', variable: 'AZ_SUBSCRIPTION_ID')
        ]) {
          bat '''
            az login --service-principal -u %AZ_CLIENT_ID% -p %AZ_CLIENT_SECRET% --tenant %AZ_TENANT_ID%
            IF ERRORLEVEL 1 exit /b 1
            az account set --subscription %AZ_SUBSCRIPTION_ID%
            IF ERRORLEVEL 1 exit /b 1

            az provider register -n Microsoft.ContainerRegistry
            az provider register -n Microsoft.Web

            az group show -n %AZ_RG% || az group create -n %AZ_RG% -l %AZ_LOCATION%
            IF ERRORLEVEL 1 exit /b 1

            az appservice plan show -g %AZ_RG% -n %AZ_PLAN% || az appservice plan create -g %AZ_RG% -n %AZ_PLAN% --is-linux --sku B1 -l %AZ_LOCATION%
            IF ERRORLEVEL 1 exit /b 1

            az webapp show -g %AZ_RG% -n %BACK_WEBAPP% || az webapp create -g %AZ_RG% -n %BACK_WEBAPP% -p %AZ_PLAN%
            az webapp show -g %AZ_RG% -n %FRONT_WEBAPP% || az webapp create -g %AZ_RG% -n %FRONT_WEBAPP% -p %AZ_PLAN%
          '''
        }
      }
    }

    stage('Push Backend to ACR') {
      steps {
        echo '⬆️ Push backend image to ACR...'
        bat '''
          az acr login --name %AZ_ACR_NAME%
          IF ERRORLEVEL 1 exit /b 1

          docker tag %BACK_IMG_LOCAL% %BACK_IMG_ACR%
          docker push %BACK_IMG_ACR%
          IF ERRORLEVEL 1 exit /b 1

          IF "%PUSH_LATEST%"=="true" (
            docker tag %BACK_IMG_LOCAL_L% %BACK_IMG_ACR_L%
            docker push %BACK_IMG_ACR_L%
          )
        '''
      }
    }

    stage('Push Front to ACR') {
      steps {
        echo '⬆️ Push front image to ACR...'
        bat '''
          az acr login --name %AZ_ACR_NAME%
          IF ERRORLEVEL 1 exit /b 1

          docker tag %FRONT_IMG_LOCAL% %FRONT_IMG_ACR%
          docker push %FRONT_IMG_ACR%
          IF ERRORLEVEL 1 exit /b 1

          IF "%PUSH_LATEST%"=="true" (
            docker tag %FRONT_IMG_LOCAL_L% %FRONT_IMG_ACR_L%
            docker push %FRONT_IMG_ACR_L%
          )
        '''
      }
    }

    stage('Deploy Backend Web App') {
      steps {
        script {
          if (params.DEPLOY_METHOD == 'acr-admin') {
            withCredentials([usernamePassword(credentialsId: 'acr-admin', usernameVariable: 'ACR_USERNAME', passwordVariable: 'ACR_PASSWORD')]) {
              bat '''
                az webapp config container set -g %AZ_RG% -n %BACK_WEBAPP% ^
                  --container-image-name %BACK_IMG_ACR% ^
                  --container-registry-url https://%AZ_ACR_LOGIN% ^
                  --container-registry-user %ACR_USERNAME% ^
                  --container-registry-password %ACR_PASSWORD%
                IF ERRORLEVEL 1 exit /b 1

                az webapp config appsettings set -g %AZ_RG% -n %BACK_WEBAPP% --settings WEBSITES_PORT=%BACK_APP_PORT% WEBSITES_CONTAINER_START_TIME_LIMIT=1800
                az webapp config set -g %AZ_RG% -n %BACK_WEBAPP% --startup-file "%BACK_STARTUP%"
                az webapp restart -g %AZ_RG% -n %BACK_WEBAPP%
                az webapp show -g %AZ_RG% -n %BACK_WEBAPP% --query defaultHostName -o tsv > back_fqdn.txt
              '''
            }
          } else {
            withCredentials([string(credentialsId: 'az-subscription-id', variable: 'AZ_SUBSCRIPTION_ID')]) {
              bat '''
                az webapp identity assign -g %AZ_RG% -n %BACK_WEBAPP%
                for /f "tokens=*" %%i in ('az webapp show -g %AZ_RG% -n %BACK_WEBAPP% --query identity.principalId -o tsv') do set PRINCIPAL=%%i
                az role assignment create --assignee %PRINCIPAL% --role "AcrPull" --scope /subscriptions/%AZ_SUBSCRIPTION_ID%/resourceGroups/%AZ_RG%/providers/Microsoft.ContainerRegistry/registries/%AZ_ACR_NAME%

                az webapp config set -g %AZ_RG% -n %BACK_WEBAPP% --acr-use-identity true --acr-identity [system]
                az webapp config container set -g %AZ_RG% -n %BACK_WEBAPP% ^
                  --container-image-name %BACK_IMG_ACR% ^
                  --container-registry-url https://%AZ_ACR_LOGIN%
                az webapp config appsettings set -g %AZ_RG% -n %BACK_WEBAPP% --settings WEBSITES_PORT=%BACK_APP_PORT% WEBSITES_CONTAINER_START_TIME_LIMIT=1800
                az webapp config set -g %AZ_RG% -n %BACK_WEBAPP% --startup-file "%BACK_STARTUP%"
                az webapp restart -g %AZ_RG% -n %BACK_WEBAPP%
                az webapp show -g %AZ_RG% -n %BACK_WEBAPP% --query defaultHostName -o tsv > back_fqdn.txt
              '''
            }
          }
        }
      }
    }

    stage('Deploy Front Web App') {
      steps {
        script {
          if (params.DEPLOY_METHOD == 'acr-admin') {
            withCredentials([usernamePassword(credentialsId: 'acr-admin', usernameVariable: 'ACR_USERNAME', passwordVariable: 'ACR_PASSWORD')]) {
              bat '''
                az webapp config container set -g %AZ_RG% -n %FRONT_WEBAPP% ^
                  --container-image-name %FRONT_IMG_ACR% ^
                  --container-registry-url https://%AZ_ACR_LOGIN% ^
                  --container-registry-user %ACR_USERNAME% ^
                  --container-registry-password %ACR_PASSWORD%
                IF ERRORLEVEL 1 exit /b 1

                rem Streamlit écoute 8501
                az webapp config appsettings set -g %AZ_RG% -n %FRONT_WEBAPP% --settings ^
                  WEBSITES_PORT=%FRONT_APP_PORT% ^
                  WEBSITES_CONTAINER_START_TIME_LIMIT=1800 ^
                  STREAMLIT_SERVER_PORT=%FRONT_APP_PORT% ^
                  STREAMLIT_SERVER_ADDRESS=0.0.0.0 ^
                  STREAMLIT_SERVER_HEADLESS=true ^
                  STREAMLIT_BROWSER_GATHER_USAGE_STATS=false ^
                  BACKEND_URL=%BACKEND_URL%

                az webapp restart -g %AZ_RG% -n %FRONT_WEBAPP%
                az webapp show -g %AZ_RG% -n %FRONT_WEBAPP% --query defaultHostName -o tsv > front_fqdn.txt
              '''
            }
          } else {
            withCredentials([string(credentialsId: 'az-subscription-id', variable: 'AZ_SUBSCRIPTION_ID')]) {
              bat '''
                az webapp identity assign -g %AZ_RG% -n %FRONT_WEBAPP%
                for /f "tokens=*" %%i in ('az webapp show -g %AZ_RG% -n %FRONT_WEBAPP% --query identity.principalId -o tsv') do set PRINCIPAL=%%i
                az role assignment create --assignee %PRINCIPAL% --role "AcrPull" --scope /subscriptions/%AZ_SUBSCRIPTION_ID%/resourceGroups/%AZ_RG%/providers/Microsoft.ContainerRegistry/registries/%AZ_ACR_NAME%

                az webapp config set -g %AZ_RG% -n %FRONT_WEBAPP% --acr-use-identity true --acr-identity [system]
                az webapp config container set -g %AZ_RG% -n %FRONT_WEBAPP% ^
                  --container-image-name %FRONT_IMG_ACR% ^
                  --container-registry-url https://%AZ_ACR_LOGIN%

                az webapp config appsettings set -g %AZ_RG% -n %FRONT_WEBAPP% --settings ^
                  WEBSITES_PORT=%FRONT_APP_PORT% ^
                  WEBSITES_CONTAINER_START_TIME_LIMIT=1800 ^
                  STREAMLIT_SERVER_PORT=%FRONT_APP_PORT% ^
                  STREAMLIT_SERVER_ADDRESS=0.0.0.0 ^
                  STREAMLIT_SERVER_HEADLESS=true ^
                  STREAMLIT_BROWSER_GATHER_USAGE_STATS=false ^
                  BACKEND_URL=%BACKEND_URL%

                az webapp restart -g %AZ_RG% -n %FRONT_WEBAPP%
                az webapp show -g %AZ_RG% -n %FRONT_WEBAPP% --query defaultHostName -o tsv > front_fqdn.txt
              '''
            }
          }
        }
      }
    }

    stage('Smoke Test on Azure (optional)') {
      when { expression { return params.RUN_SMOKE_AFTER_DEPLOY } }
      steps {
        echo '🩺 Smoke test back & front (non-bloquant sauf FAIL_ON_SMOKE=true)'
        bat '''
          set FAIL=0

          rem ---- BACKEND
          if exist back_fqdn.txt (
            set /p BFQDN=<back_fqdn.txt
            powershell -NoProfile -Command "Start-Sleep -Seconds 15"
            powershell -NoProfile -Command ^
              "$ErrorActionPreference='SilentlyContinue'; try{$r=Invoke-WebRequest http://%BFQDN%/ -UseBasicParsing; if($r.StatusCode -lt 200 -or $r.StatusCode -ge 400){exit 2}}catch{exit 2}"
            if ERRORLEVEL 2 ( echo "WARN: backend / KO" & set FAIL=1 ) else ( echo "OK: backend /" )
          )

          rem ---- FRONT
          if exist front_fqdn.txt (
            set /p FFQDN=<front_fqdn.txt
            powershell -NoProfile -Command "Start-Sleep -Seconds 15"
            powershell -NoProfile -Command ^
              "$ErrorActionPreference='SilentlyContinue'; try{$r=Invoke-WebRequest http://%FFQDN%/ -UseBasicParsing; if($r.StatusCode -lt 200 -or $r.StatusCode -ge 400){exit 3}}catch{exit 3}"
            if ERRORLEVEL 3 ( echo "WARN: front / KO" & set FAIL=1 ) else ( echo "OK: front /" )
          )

          if %FAIL%==1 (
            echo "Smoke test warnings"
            IF "%FAIL_ON_SMOKE%"=="true" exit /b 1
          ) else (
            echo "✅ Smoke test passed"
          )
        '''
      }
    }
  }

  post {
    always {
      echo '📦 Archiving artifacts...'
      archiveArtifacts artifacts: 'artifacts/**, models/**, back_fqdn.txt, front_fqdn.txt', allowEmptyArchive: true
    }
    success {
      echo '🎉 SUCCESS'
      powershell '''
        $back = (Test-Path "back_fqdn.txt")  ? ((Get-Content "back_fqdn.txt" | Select-Object -First 1).Trim())   : ""
        $front= (Test-Path "front_fqdn.txt") ? ((Get-Content "front_fqdn.txt"| Select-Object -First 1).Trim())    : ""
        if ($back)  { Write-Host ("Backend:  http://{0}/   (docs: http://{0}/docs)" -f $back) }
        if ($front) { Write-Host ("Front:    http://{0}/" -f $front) }
        exit 0
      '''
    }
    failure {
      echo '❌ PIPELINE FAILED - check logs'
    }
  }
}
